<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SECURE OS - ADMIN LOGIN</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for the retro/hacker aesthetic */
        @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;700&display=swap');

        body {
            font-family: 'IBM Plex Mono', monospace;
            background-color: #0b1a2a; /* Dark blue/black background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
            color: #c0c0c0;
        }
        
        /* The main console box mimicking a classic terminal/dialog */
        .console-box {
            background-color: #1a2a3a;
            border: 2px solid #00c0ff; /* Neon blue border */
            box-shadow: 0 0 30px rgba(0, 192, 255, 0.5), inset 0 0 10px rgba(0, 192, 255, 0.2);
            max-width: 480px;
            width: 100%;
            transition: all 0.5s ease-in-out;
            animation: flicker 1s infinite alternate;
        }

        /* Input fields */
        input[type="text"], input[type="password"] {
            background-color: #0d1720;
            color: #00ff00; /* Neon green text for input */
            border: 1px solid #008000;
            padding: 0.75rem;
            box-shadow: inset 0 0 5px rgba(0, 255, 0, 0.3);
            font-size: 1rem;
            font-family: 'IBM Plex Mono', monospace;
        }

        /* Status messages (ACCESS GRANTED/DENIED) */
        .status-message {
            font-size: 1.5rem;
            font-weight: 700;
            text-shadow: 0 0 10px;
            animation: glitch 0.5s infinite alternate;
        }
        .status-granted {
            color: #00ff00;
            text-shadow: 0 0 20px #00ff00;
        }
        .status-denied {
            color: #ff3333;
            text-shadow: 0 0 20px #ff3333;
        }
        
        /* Custom Button Style */
        .console-button {
            background-color: #00c0ff;
            color: #0b1a2a;
            font-weight: bold;
            border: none;
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            transition: background-color 0.1s;
            box-shadow: 0 0 15px rgba(0, 192, 255, 0.5);
        }
        .console-button:hover {
            background-color: #33e0ff;
            box-shadow: 0 0 20px #33e0ff;
        }

        /* Keyframes for the dramatic effects */
        @keyframes flicker {
            0% { opacity: 0.98; }
            100% { opacity: 1; }
        }

        @keyframes glitch {
            0% { transform: translate(0); }
            20% { transform: translate(-2px, 2px); }
            40% { transform: translate(-2px, -2px); }
            60% { transform: translate(2px, 2px); }
            80% { transform: translate(2px, -2px); }
            100% { transform: translate(0); }
        }

    </style>
</head>
<body>

    <div class="console-box p-8 rounded-lg">
        <!-- Title Bar Mimic -->
        <div class="bg-gray-700 text-white p-2 mb-6 flex justify-between items-center rounded-t-md -mx-8 -mt-8">
            <span class="font-bold text-sm ml-2">SecureLogin.exe - System Access</span>
            <div class="flex">
                <div class="w-4 h-4 bg-yellow-500 border border-gray-900 mx-0.5"></div>
                <div class="w-4 h-4 bg-red-600 border border-gray-900 mx-0.5"></div>
            </div>
        </div>

        <h1 class="text-xl font-bold text-center mb-6 text-white tracking-widest">
            OS KERNEL AUTHENTICATION
        </h1>

        <form id="login-form" onsubmit="return handleLogin(event)" class="space-y-6">
            <div>
                <label for="username" class="block text-xs uppercase tracking-wider mb-2 text-gray-400">Username:</label>
                <input type="text" id="username" name="username" value="admin_root" readonly 
                       class="w-full rounded-sm opacity-75 cursor-not-allowed">
            </div>

            <div>
                <label for="password" class="block text-xs uppercase tracking-wider mb-2 text-gray-400">Password:</label>
                <input type="password" id="password" name="password" required 
                       class="w-full rounded-sm focus:outline-none">
            </div>

            <div class="flex justify-center pt-4">
                <button type="submit" id="login-button" class="console-button rounded-full transition-all duration-300 transform hover:scale-105">
                    INITIATE CONNECTION
                </button>
            </div>
        </form>

        <!-- Status area for "Access Granted/Denied" -->
        <div id="status-display" class="mt-8 text-center min-h-[40px]">
            <!-- Messages will appear here -->
        </div>
    </div>

    <script>
        // Use a variable to define the secret for easy changes
        const SECRET_PASSWORD = "0xDEADBEEF";
        const passwordInput = document.getElementById('password');
        const statusDisplay = document.getElementById('status-display');
        const loginForm = document.getElementById('login-form');
        const loginButton = document.getElementById('login-button');

        // Utility to handle exponential backoff for a simulated API call (optional but adds realism)
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        async function handleLogin(event) {
            // Prevent default form submission
            event.preventDefault();

            const enteredPassword = passwordInput.value.trim();
            
            // Clear previous message and show loading
            statusDisplay.innerHTML = '<span class="text-yellow-400">AUTHENTICATING...</span>';
            loginButton.disabled = true;

            // Simulate network/processing delay for cinematic effect
            await sleep(1500);

            if (enteredPassword === SECRET_PASSWORD) {
                // SUCCESS SCENARIO
                
                // 1. Show processing messages
                statusDisplay.innerHTML = '<span class="text-yellow-400">DECRYPTING TOKEN...</span>';
                await sleep(500);
                statusDisplay.innerHTML = '<span class="text-yellow-400">VERIFYING SIGNATURE...</span>';
                await sleep(500);

                // 2. Display the dramatic "ACCESS GRANTED" effect
                statusDisplay.innerHTML = `
                    <div class="status-message status-granted transition-all duration-500">
                        >>> ACCESS GRANTED <<<
                    </div>
                `;
                
                // Optionally disable form forever after success
                loginForm.classList.add('pointer-events-none', 'opacity-50');
                
            } else {
                // FAILURE SCENARIO

                // 1. Display the error
                statusDisplay.innerHTML = `
                    <div class="status-message status-denied">
                        !!! ACCESS DENIED !!!
                    </div>
                `;
                
                // 2. Flash the password input border red
                passwordInput.classList.add('border-red-600', 'ring-4', 'ring-red-600', 'animate-pulse');
                
                // 3. Clear the password field after a delay
                await sleep(1000);
                passwordInput.value = '';

                // 4. Remove the failure indicators and clean up
                passwordInput.classList.remove('border-red-600', 'ring-4', 'ring-red-600', 'animate-pulse');
                
                // 5. Restore loading button
                loginButton.disabled = false;
                statusDisplay.innerHTML = '<span class="text-gray-500">Awaiting Input...</span>';
            }
        }

        // Initialize display message
        window.onload = () => {
             statusDisplay.innerHTML = '<span class="text-gray-500">Awaiting Input...</span>';
        }

    </script>
</body>
</html>
