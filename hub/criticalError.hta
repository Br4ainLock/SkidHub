<html>
<head>
<title>SYSTEM HACK IN PROGRESS - DO NOT INTERRUPT</title>
<HTA:APPLICATION
    ID="oHTA"
    APPLICATIONNAME="Hack"
    VERSION="1.0"
    BORDER="none"
    INNERBORDER="no"
    SCROLL="no"
    WINDOWSTATE="maximize"
    MAXIMIZEBUTTON="no"
    MINIMIZEBUTTON="no"
    SYSMENU="no"
    CAPTION="no"
/>

<style>
    /* Terminal style */
    body {
        font-family: 'Consolas', monospace;
        background-color: #000;
        color: #00ff41;
        overflow: hidden;
        margin: 0;
        padding: 0;
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        user-select: none;
    }

    /* --- Animated Text Effects --- */

    .main-message {
        font-size: 4rem;
        text-shadow:
            0 0 10px #00ff41,
            0 0 20px #00ff41,
            0 0 30px #00ff41,
            0 0 40px #00ff41;
        margin-bottom: 20px;
        animation: intenseBlink 1.2s steps(2, start) infinite;
        letter-spacing: 0.15em;
    }

    .sub-message {
        font-size: 1.5rem;
        margin-bottom: 40px;
        color: #ff0000;
        font-weight: bold;
        animation: flickerRed 1.5s infinite;
    }

    #activity-log {
        height: 220px;
        width: 80%;
        text-align: left;
        overflow-y: scroll; /* Added scroll for log effect */
        padding: 15px;
        border: 2px solid #00ff41;
        font-size: 1rem;
        line-height: 1.3em;
        background: #001a00;
        box-shadow: 0 0 15px #00ff41 inset;
        user-select: none;
    }

    #activity-log p {
        margin: 0;
        white-space: nowrap; /* Prevent wrapping for console look */
        overflow: hidden;
        width: 100%;
    }

    .status-line {
        font-size: 1.6rem;
        margin-top: 40px;
        font-weight: bold;
        color: #00ff41;
        text-shadow: 0 0 8px #00ff41;
        user-select: none;
    }

    .status-exit {
        font-size: 1.2rem;
        margin-top: 10px;
        color: #ff9900;
        font-style: italic;
        user-select: none;
    }

    @keyframes intenseBlink {
        0%, 50%, 100% { opacity: 1; }
        25%, 75% { opacity: 0.3; }
    }

    @keyframes flickerRed {
        0%, 100% { color: #ff0000; }
        50% { color: #a00000; }
    }

    /* --- Log Line Fade-In Animation --- */

    .log-line {
        opacity: 0;
        transform: translateY(10px);
        animation: fadeIn 0.5s forwards;
    }

    @keyframes fadeIn {
        to { opacity: 1; transform: translateY(0); }
    }
</style>

<script language="JScript">
    var spamInterval = 100; // ms between popup spawns
    var logInterval = 350; // ms between log updates
    var windowReferences = [];
    var spamIntervalID;
    var logIntervalID;
    var mainStatusLine;
    var activityLog;
    var logMessages = [
        "> Initializing C:\\Payload\\winload.exe...",
        "> Bypassing UAC (User Access Control)... Success.",
        "> Scanning network for available ports...",
        "> Port 22/tcp (SSH) [OPEN]. Port 80/tcp (HTTP) [OPEN]. Port 443/tcp (HTTPS) [OPEN].",
        "> Attempting to establish remote C2 connection via port 443...",
        "> Connection established. Key exchange: AES-256-GCM.",
        "> [!] KERNEL HOOK INJECTION STARTED...",
        "> Accessing registry keys: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
        "> Persistence mechanism established. Process PID: 8872",
        "> Uploading data block 1 of 5: System Information...",
        "> Uploading data block 2 of 5: Desktop Documents...",
        "> Uploading data block 3 of 5: Browser Credentials...",
        "> Starting denial-of-service on local firewall...",
        "> Firewall disabled. All ports open. Critical vulnerability reached.",
        "> Spawning critical error processes. Data corruption imminent.",
        "> [HACKER MESSAGE] &nbsp; Your system is now mine. Have a bad day."
    ];
    var logCounter = 0;

    function getErrorHtml(errorNumber) {
        return '<html><head><title>CRITICAL SYSTEM ERROR</title><style>' +
               'body{font-family:Arial,sans-serif;background:#111;color:#000;margin:0;padding:10px;}' +
               '.error-window{background:#f44336;color:#fff;border:3px solid #900;padding:15px;box-shadow:0 0 20px #900;}' +
               '.error-title-bar{background:#b71c1c;padding:5px;font-weight:bold;font-size:1.1rem;margin-bottom:10px;text-align:center;}' +
               '.error-content{display:flex;align-items:center;font-size:0.9rem;}' +
               '.error-icon{font-size:4rem;margin-right:15px;}' +
               '.error-text{flex:1;}' +
               '.error-button{background:#900;color:#fff;border:none;padding:5px 12px;cursor:default;float:right;margin-top:15px;font-weight:bold;}' +
               '</style></head><body>' +
               '<div class="error-window">' +
               '<div class="error-title-bar">Critical System Error - Kernel32.dll Error ' + errorNumber + '</div>' +
               '<div class="error-content">' +
               '<div class="error-icon">&#9888;</div>' +
               '<div class="error-text">' +
               '<strong>Fatal Exception E06D7363 at C0000005.</strong><br>' +
               'System integrity compromised.<br>' +
               'All data will be wiped in T-0 seconds.<br>' +
               'Click "Abort" to stop the hack. (Note: Clicking does nothing.)' +
               '</div></div>' +
               '<button class="error-button" onclick="return false;">Abort</button>' +
               '</div>' +
               '</body></html>';
    }

    function openErrorWindow() {
        var errorCount = windowReferences.length + 1;

        var screenW = screen.width;
        var screenH = screen.height;
        var w = 400;
        var h = 220;
        var x = Math.floor(Math.random() * (screenW - w));
        var y = Math.floor(Math.random() * (screenH - h));

        var features = 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y +
                       ',toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=no';

        // window.open in an HTA will open a standard browser window by default.
        // We use an empty string for the URL to open a blank window and write the content.
        var popup = window.open('', 'ErrorWindow' + errorCount, features); 
        
        if (popup) {
            // Write the custom HTML content into the new window
            popup.document.write(getErrorHtml(errorCount));
            popup.document.close();
            windowReferences.push(popup);
        } else {
            // This case handles popup blockers, though less common in HTA/JScript.
            if (errorCount === 1) {
                // If the first popup fails, stop trying.
                stopSpamming();
            }
        }
    }

    function updateLog() {
        if (logCounter < logMessages.length) {
            var message = logMessages[logCounter];
            var newDiv = document.createElement('p');
            newDiv.className = 'log-line';
            newDiv.innerHTML = message;
            activityLog.appendChild(newDiv);
            
            // Scroll to the bottom of the log
            activityLog.scrollTop = activityLog.scrollHeight;
            
            logCounter++;

            // Stop the log animation when the last message is added
            if (logCounter === logMessages.length) {
                clearInterval(logIntervalID);
                startSpamming(); // Start the error popups after the log finishes
            }
        }
    }

    function startSpamming(F) {
        if (!spamIntervalID) {
            mainStatusLine.innerText = 'STATUS: ATTACK INITIATED. PRESS [ESC] TO TERMINATE.';
            spamIntervalID = setInterval(openErrorWindow, spamInterval);
        }
    }

    function stopSimulation() {
        if (spamIntervalID) {
            clearInterval(spamIntervalID);
            spamIntervalID = null;
        }
        if (logIntervalID) {
             clearInterval(logIntervalID);
             logIntervalID = null;
        }
        
        // Close all spawned error windows
        for (var i = 0; i < windowReferences.length; i++) {
            try {
                if (windowReferences[i] && !windowReferences[i].closed) {
                    windowReferences[i].close();
                }
            } catch(e) {}
        }
        windowReferences = [];
        
        // Close the main HTA window
        try {
            window.close();
        } catch(e) {}
    }

    function handleKeyDown(e) {
        e = e || window.event;
        // Key code 27 is the Escape key
        if (e.keyCode === 27) {
            stopSimulation();
        }
    }

    // --- Corrected JScript ---

    window.onload = function() {
        document.onkeydown = handleKeyDown;

        // REMOVED: oHTA.moveTo(0, 0);
        // REMOVED: oHTA.resizeTo(screen.width, screen.height);
        // We rely on WINDOWSTATE="maximize" in the HTA tag for full screen

        // Get DOM elements
        mainStatusLine = document.getElementById('status-line');
        activityLog = document.getElementById('activity-log');

        mainStatusLine.innerText = 'STATUS: INITIALIZING LOG SEQUENCE...';
        
        // Start the animated log update sequence
        logIntervalID = setInterval(updateLog, logInterval);
    };
</script>

</head>
<body>
    <div class="main-message">SYSTEM INTRUSION DETECTED</div>
    <div class="sub-message">*** WARNING: MALWARE EXECUTION IN PROGRESS ***</div>

    <div id="activity-log">
        </div>

    <div class="status-line" id="status-line">STATUS: INITIALIZING...</div>
    <div class="status-exit">(Quick Exit: Press the <strong>ur COOKED</strong> key)</div>
</body>
</html>